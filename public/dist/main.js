(()=>{function n(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}function e(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var t,r,o;r={consoleEx:function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n)}var t,r;return t=n,r=[{key:"getStyle",value:function(n,e){return"\n                   color: ".concat(n,";\n                   background-color: ").concat(e,";\n                   padding: 0px 3px;\n                   border-radius: 3px;\n                   line-height: 15px;\n                   ")}},{key:"pack",value:function(n,e){return["%c%s",n,"EB",e]}},{key:"textPack",value:function(n,e){return["%c%s",n,e]}}],null&&e(t.prototype,null),r&&e(t,r),n}(),config:{version:"$$version",mainURL:"$$mainURL",swURL:"$$swURL",webSocketUrl:"$$webSocketUrl",ifUpdateNow:$$ifUpdateNow,packageJson:JSON.parse("$$packageJson")}},window.esbuildTool=r,(t=console).log.apply(t,function(e){if(Array.isArray(e))return n(e)}(o=r.consoleEx.textPack(r.consoleEx.getStyle("#8785a2","rgb(138 255 185 / 20%)"),"欢迎使用layabox-esbuild构建工具，该工具只是个外壳不会修改项目任何内容🌝。\n当前版本 @".concat(r.config.packageJson.version," 最新版本请查看 https://github.com/yayaluoya/layaBoxEsBuild.git")))||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(o)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly/impnvuI9sZWLinZUvLi9zcmMvbWFpbi5qcyJdLCJuYW1lcyI6WyJlc2J1aWxkVG9vbCIsImNvbnNvbGVFeCIsIl9jb2xvciIsIl9iZ0NvbG9yIiwiX3N0eWxlIiwiX3BhciIsIl90ZXh0IiwiY29uZmlnIiwidmVyc2lvbiIsIm1haW5VUkwiLCJzd1VSTCIsIndlYlNvY2tldFVybCIsImlmVXBkYXRlTm93IiwiJCRpZlVwZGF0ZU5vdyIsInBhY2thZ2VKc29uIiwiSlNPTiIsInBhcnNlIiwid2luZG93IiwiY29uc29sZSIsImxvZyIsInRleHRQYWNrIiwiZ2V0U3R5bGUiXSwibWFwcGluZ3MiOiJzUkFDQSxJQTBDYSxFQUVIQSxFLEVBQUFBLEVBQWMsQ0FDaEJDLFVBN0N1Qix5Qiw0RkFBQSxTLFFBQUEsTyxFQUFBLEUsRUFBQSx1QkFVdkIsU0FBZ0JDLEVBQVFDLEdBQ3BCLDRDQUNnQkQsRUFEaEIsbURBRTJCQyxFQUYzQixpSkFYbUIsa0JBeUJ2QixTQUFZQyxFQUFRQyxHQUNoQixNQUFPLENBQUMsT0FBUUQsRUFBUSxLQUFNQyxLQTFCWCxzQkFrQ3ZCLFNBQWdCRCxFQUFRRSxHQUNwQixNQUFPLENBQUMsT0FBUUYsRUFBUUUsTUFuQ0wsTSxjQUFBLE0sVUFBQSxLQStDdkJDLE9BQVEsQ0FDSkMsUUFBUyxZQUNUQyxRQUFTLFlBQ1RDLE1BQU8sVUFDUEMsYUFBYyxpQkFDZEMsWUFBYUMsY0FDYkMsWUFBYUMsS0FBS0MsTUFBTSxtQkFJaENDLE9BQU9qQixZQUFjQSxHQUVyQixFQUFBa0IsU0FBUUMsSUFBUixRLCtDQUNPbkIsRUFBWUMsVUFBVW1CLFNBQ3JCcEIsRUFBWUMsVUFBVW9CLFNBQVMsVUFBVywwQkFEM0MsK0RBRXlEckIsRUFBWU8sT0FBT08sWUFBWU4sUUFGeEYsK0QiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8v5omT5Y2w5bel5YW35omp5bGVXHJcbmNvbnN0IGNvbnNvbGVFeCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIOi+k+WHuuWMheijheexu1xyXG4gICAgICovXHJcbiAgICBjbGFzcyBDb25zb2xlRXgge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluagt+W8j1xyXG4gICAgICAgICAqIEBwYXJhbSBfY29sb3Ig5a2X5L2T6aKc6ImyXHJcbiAgICAgICAgICogQHBhcmFtIF9iZ0NvbG9yIOiDjOaZr+minOiJslxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBnZXRTdHlsZShfY29sb3IsIF9iZ0NvbG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtfY29sb3J9O1xyXG4gICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtfYmdDb2xvcn07XHJcbiAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHggM3B4O1xyXG4gICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xyXG4gICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE1cHg7XHJcbiAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDljIXoo4Xkv6Hmga9cclxuICAgICAgICAgKiBAcGFyYW0gX3N0eWxlIOagt+W8j1xyXG4gICAgICAgICAqIEBwYXJhbSBfcGFyIOWPguaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBwYWNrKF9zdHlsZSwgX3Bhcikge1xyXG4gICAgICAgICAgICByZXR1cm4gWyclYyVzJywgX3N0eWxlLCAnRUInLCBfcGFyXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaWh+acrOWMheijhVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gX3N0eWxlIOagt+W8j1xyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gX3RleHQg5paH5pys5YaF5a65XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHRleHRQYWNrKF9zdHlsZSwgX3RleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnJWMlcycsIF9zdHlsZSwgX3RleHRdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vXHJcbiAgICByZXR1cm4gQ29uc29sZUV4O1xyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIC8v5re75Yqg5YWo5bGA5bel5YW3XHJcbiAgICBjb25zdCBlc2J1aWxkVG9vbCA9IHtcclxuICAgICAgICBjb25zb2xlRXg6IGNvbnNvbGVFeCxcclxuICAgICAgICAvL+mFjee9ruebuOWFs1xyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICB2ZXJzaW9uOiAnJCR2ZXJzaW9uJyxcclxuICAgICAgICAgICAgbWFpblVSTDogJyQkbWFpblVSTCcsXHJcbiAgICAgICAgICAgIHN3VVJMOiAnJCRzd1VSTCcsXHJcbiAgICAgICAgICAgIHdlYlNvY2tldFVybDogJyQkd2ViU29ja2V0VXJsJyxcclxuICAgICAgICAgICAgaWZVcGRhdGVOb3c6ICQkaWZVcGRhdGVOb3csXHJcbiAgICAgICAgICAgIHBhY2thZ2VKc29uOiBKU09OLnBhcnNlKCckJHBhY2thZ2VKc29uJyksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgICAvL1xyXG4gICAgd2luZG93LmVzYnVpbGRUb29sID0gZXNidWlsZFRvb2w7XHJcbiAgICAvL+aJk+WNsOaPkOekulxyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgLi4uZXNidWlsZFRvb2wuY29uc29sZUV4LnRleHRQYWNrKFxyXG4gICAgICAgICAgICBlc2J1aWxkVG9vbC5jb25zb2xlRXguZ2V0U3R5bGUoJyM4Nzg1YTInLCAncmdiKDEzOCAyNTUgMTg1IC8gMjAlKScpLFxyXG4gICAgICAgICAgICBg5qyi6L+O5L2/55SobGF5YWJveC1lc2J1aWxk5p6E5bu65bel5YW377yM6K+l5bel5YW35Y+q5piv5Liq5aSW5aOz5LiN5Lya5L+u5pS56aG555uu5Lu75L2V5YaF5a658J+MneOAglxcbuW9k+WJjeeJiOacrCBAJHtlc2J1aWxkVG9vbC5jb25maWcucGFja2FnZUpzb24udmVyc2lvbn0g5pyA5paw54mI5pys6K+35p+l55yLIGh0dHBzOi8vZ2l0aHViLmNvbS95YXlhbHVveWEvbGF5YUJveEVzQnVpbGQuZ2l0YFxyXG4gICAgICAgIClcclxuICAgICk7XHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==