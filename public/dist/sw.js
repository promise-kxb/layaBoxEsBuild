(()=>{function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function n(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s;function i(e){var t,n=e.request;if(s&&!(t=c.get(n.url))){var a,i=new RegExp("^".concat(s.mainURL));i.test(n.url)&&(t=null===(a=r.fetch(n.url.replace(i,"")))||void 0===a?void 0:a.then((function(e){return c.addResponse(n,e)})))}t||(t=fetch(n).then((function(e){return c.addResponse(n,e)}))),e.respondWith(t)}self.addEventListener("install",(function(e){})),self.addEventListener("activate",(function(e){})),self.addEventListener("message",(function(e){var t=JSON.parse(e.data),n=t.type,a=t.mes;switch(n){case"update":s&&a.version==s.version||(c.removeAll(),r.update(a.webSocketUrl),r.addMessageEventListener((function(e){var t=JSON.parse(e.data);"scriptUpdate"==t.type&&c.remove(t.mes)}))),s=a;break;case"close":c.removeAll(),r.instance&&r.instance.close(),self.removeEventListener("fetch",i)}})),self.addEventListener("fetch",i);var r=function(){function t(){e(this,t)}return n(t,null,[{key:"update",value:function(e){var t=this;this.m_fetchTaskList.length=0,this.instance&&this.instance.close(),this.instance=new WebSocket(e),this.usable=!0,this.instance.addEventListener("error",(function(){console.error("webSocketÂá∫ÈîôÂï¶ÔºÅüò±"),c.removeAll(),t.usable=!1})),this.addMessageEventListener((function(e){var n=JSON.parse(e.data);"fetch"==n.type&&t._fetch(n.mes)}))}},{key:"fetch",value:function(e){var t=this;if(!this.usable||1!=this.instance.readyState)return null;var n=this.getFetchKey();return new Promise((function(a){t.m_fetchTaskList.push({key:n,resolve:a}),t.instance.send(JSON.stringify({type:"fetch",mes:{url:e,key:n}}))}))}},{key:"_fetch",value:function(e){var t=e.key,n=e.body,a=e.head,s=e.stateCode,i=this.m_fetchTaskList.findIndex((function(e){return e.key==t}));-1!=i?(this.m_fetchTaskList[i].resolve(new Response(n,{headers:a,status:s})),this.m_fetchTaskList.splice(i,1)):console.error("Ê®°ÊãühttpËØ∑Ê±ÇÂá∫ÈîôÔºåÂª∫ËÆÆÈáçÂêØÂ∑•ÂÖ∑„ÄÇ")}},{key:"getFetchKey",value:function(){return btoa("".concat(Date.now(),":").concat(this.getFetchKeyNumber++,":").concat(Math.random()))}},{key:"addMessageEventListener",value:function(e){this.usable&&this.instance.addEventListener("message",e)}}]),t}();a(r,"instance",null),a(r,"usable",!1),a(r,"m_fetchTaskList",[]),a(r,"getFetchKeyNumber",0);var c=function(){function t(){e(this,t)}return n(t,null,[{key:"get",value:function(e){e=e.replace(/\\/g,"/");var t=this.cache.find((function(t){return new RegExp("^".concat(t[0],"$"),"i").test(e)}));if(t)return t[2].clone()}},{key:"addResponse",value:function(e,t){return t.headers.has("file-only-key")&&r.usable&&this.add(e.url,t.headers.get("file-only-key"),t.clone()),t}},{key:"add",value:function(e,t,n){e=e.replace(/\\/g,"/"),this.remove(t),this.cache.push([e,t,n])}},{key:"remove",value:function(e){var t=this.cache.findIndex((function(t){return t[1]==e}));-1!=t&&(console.log("%c%s","color: #8785a2;","> Âà†Èô§swÂ∫üÂºÉÁºìÂ≠òÊñá‰ª∂@".concat(this.cache[t][0].replace(/[a-z]+:\/\/[a-zA-Z0-9\.]+:?[0-9]*/,"")," ‚úñÔ∏è")),this.cache.splice(t,1))}},{key:"removeAll",value:function(){this.cache.length=0}}]),t}();a(c,"cache",[])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,