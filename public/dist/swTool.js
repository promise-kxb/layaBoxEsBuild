(()=>{function e(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,r){if(e){if("string"==typeof e)return o(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?o(e,r):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,o){(null==o||o>e.length)&&(o=e.length);for(var r=0,t=new Array(o);r<o;r++)t[r]=e[r];return t}if("serviceWorker"in navigator){var r,t=!1;navigator.serviceWorker.controller?navigator.serviceWorker.controller.scriptURL.match(/[^\/]+$/)[0]!=esbuildTool.config.swURL?(t=!0,navigator.serviceWorker.controller.postMessage(JSON.stringify({type:"close"})),(r=console).log.apply(r,e(esbuildTool.consoleEx.textPack(esbuildTool.consoleEx.getStyle("#fdfaf6","#ce1212"),"工具更新，已停用旧 serviceWorker \n关闭此窗口，用新窗口打开 ".concat(location.href," 重启项目。"))))):navigator.serviceWorker.controller.postMessage(JSON.stringify({type:"update",mes:esbuildTool.config})):t=!0,t&&navigator.serviceWorker.register("/".concat(esbuildTool.config.swURL)).then((function(o){var r,t;null===(r=o.active)||void 0===r||r.postMessage(JSON.stringify({type:"update",mes:esbuildTool.config})),(t=console).log.apply(t,e(esbuildTool.consoleEx.textPack(esbuildTool.consoleEx.getStyle("#8785a2","#f4f6ff"),"ServiceWorker 注册成功✔️: 访问更快⚡")))})).catch((function(o){var r;(r=console).log.apply(r,e(esbuildTool.consoleEx.textPack(esbuildTool.consoleEx.getStyle("#8785a2","#f4f6ff"),"ServiceWorker 注册失败❌: ".concat(o))))}))}else{var n;(n=console).log.apply(n,e(esbuildTool.consoleEx.textPack(esbuildTool.consoleEx.getStyle("#8785a2","#ffeda3"),"不支持 ServiceWorker ! 😱")))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvc3dUb29sLmpzIl0sIm5hbWVzIjpbIm5hdmlnYXRvciIsIl9pZlJlZ2lzdGVyIiwic2VydmljZVdvcmtlciIsImNvbnRyb2xsZXIiLCJzY3JpcHRVUkwiLCJtYXRjaCIsImVzYnVpbGRUb29sIiwiY29uZmlnIiwic3dVUkwiLCJwb3N0TWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0eXBlIiwiY29uc29sZSIsImxvZyIsImNvbnNvbGVFeCIsInRleHRQYWNrIiwiZ2V0U3R5bGUiLCJsb2NhdGlvbiIsImhyZWYiLCJtZXMiLCJyZWdpc3RlciIsInRoZW4iLCJyZWdpc3RyYXRpb24iLCJhY3RpdmUiLCJlcnIiXSwibWFwcGluZ3MiOiJzdkJBQ0EsR0FBSSxrQkFBbUJBLFVBQVcsQ0FFOUIsSUFJc0csRUFKbEdDLEdBQWMsRUFFZEQsVUFBVUUsY0FBY0MsV0FFcEJILFVBQVVFLGNBQWNDLFdBQVdDLFVBQVVDLE1BQU0sV0FBVyxJQUFNQyxZQUFZQyxPQUFPQyxPQUN2RlAsR0FBYyxFQUNkRCxVQUFVRSxjQUFjQyxXQUFXTSxZQUFZQyxLQUFLQyxVQUFVLENBQzFEQyxLQUFNLFlBR1YsRUFBQUMsU0FBUUMsSUFBUixVQUNPUixZQUFZUyxVQUFVQyxTQUNyQlYsWUFBWVMsVUFBVUUsU0FBUyxVQUFXLFdBRDNDLGlEQUUyQ0MsU0FBU0MsS0FGcEQsY0FNUG5CLFVBQVVFLGNBQWNDLFdBQVdNLFlBQVlDLEtBQUtDLFVBQVUsQ0FDMURDLEtBQU0sU0FDTlEsSUFBS2QsWUFBWUMsVUFJekJOLEdBQWMsRUFHZEEsR0FFQUQsVUFBVUUsY0FBY21CLFNBQXhCLFdBQXFDZixZQUFZQyxPQUFPQyxRQUFTYyxNQUFLLFNBQUNDLEdBQWlCLFFBRXBGLFVBQUFBLEVBQWFDLGNBQWIsU0FBcUJmLFlBQVlDLEtBQUtDLFVBQVUsQ0FDNUNDLEtBQU0sU0FDTlEsSUFBS2QsWUFBWUMsV0FHckIsRUFBQU0sU0FBUUMsSUFBUixVQUNPUixZQUFZUyxVQUFVQyxTQUNyQlYsWUFBWVMsVUFBVUUsU0FBUyxVQUFXLFdBQzFDLG9DQVZaLE9BYVMsU0FBQ1EsR0FBUSxPQUNkLEVBQUFaLFNBQVFDLElBQVIsVUFDT1IsWUFBWVMsVUFBVUMsU0FDckJWLFlBQVlTLFVBQVVFLFNBQVMsVUFBVyxXQUQzQywrQkFFeUJRLGFBS3JDLFFBQ0gsRUFBQVosU0FBUUMsSUFBUixVQUNPUixZQUFZUyxVQUFVQyxTQUNyQlYsWUFBWVMsVUFBVUUsU0FBUyxVQUFXLFdBQzFDLDhCIiwiZmlsZSI6InN3VG9vbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8v5YWI5Yik5pat6IO95ZCm5L2/55Soc2VydmljZVdvcmtlclxyXG5pZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xyXG4gICAgLy/ms6jlhoxcclxuICAgIGxldCBfaWZSZWdpc3RlciA9IGZhbHNlO1xyXG4gICAgLy/mm7TmlrDlt7LmnInnmoRzd1xyXG4gICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcclxuICAgICAgICAvL+WFs+mXreS4iuS4gOS4queJiOacrOeahHN3XHJcbiAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIuc2NyaXB0VVJMLm1hdGNoKC9bXlxcL10rJC8pWzBdICE9IGVzYnVpbGRUb29sLmNvbmZpZy5zd1VSTCkge1xyXG4gICAgICAgICAgICBfaWZSZWdpc3RlciA9IHRydWU7XHJcbiAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Nsb3NlJyxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAvL+aPkOekuuaJk+W8gOaWsOeql+WPo1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICAgIC4uLmVzYnVpbGRUb29sLmNvbnNvbGVFeC50ZXh0UGFjayhcclxuICAgICAgICAgICAgICAgICAgICBlc2J1aWxkVG9vbC5jb25zb2xlRXguZ2V0U3R5bGUoJyNmZGZhZjYnLCAnI2NlMTIxMicpLFxyXG4gICAgICAgICAgICAgICAgICAgIGDlt6Xlhbfmm7TmlrDvvIzlt7LlgZznlKjml6cgc2VydmljZVdvcmtlciBcXG7lhbPpl63mraTnqpflj6PvvIznlKjmlrDnqpflj6PmiZPlvIAgJHtsb2NhdGlvbi5ocmVmfSDph43lkK/pobnnm67jgIJgXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlci5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJyxcclxuICAgICAgICAgICAgICAgIG1lczogZXNidWlsZFRvb2wuY29uZmlnLFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBfaWZSZWdpc3RlciA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvL1xyXG4gICAgaWYgKF9pZlJlZ2lzdGVyKSB7XHJcbiAgICAgICAgLy/ms6jlhoxzd1xyXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKGAvJHtlc2J1aWxkVG9vbC5jb25maWcuc3dVUkx9YCkudGhlbigocmVnaXN0cmF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIC8v56uL5Yi75Y+R6YCB5LiA5Liq5Yid5aeL5YyW5LqL5Lu277yM5Yid5aeL5YyW55u45YWz5L+h5oGvXHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi5hY3RpdmU/LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLFxyXG4gICAgICAgICAgICAgICAgbWVzOiBlc2J1aWxkVG9vbC5jb25maWcsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgICAgICAuLi5lc2J1aWxkVG9vbC5jb25zb2xlRXgudGV4dFBhY2soXHJcbiAgICAgICAgICAgICAgICAgICAgZXNidWlsZFRvb2wuY29uc29sZUV4LmdldFN0eWxlKCcjODc4NWEyJywgJyNmNGY2ZmYnKSxcclxuICAgICAgICAgICAgICAgICAgICAnU2VydmljZVdvcmtlciDms6jlhozmiJDlip/inJTvuI86IOiuv+mXruabtOW/q+KaoSdcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgICAgLi4uZXNidWlsZFRvb2wuY29uc29sZUV4LnRleHRQYWNrKFxyXG4gICAgICAgICAgICAgICAgICAgIGVzYnVpbGRUb29sLmNvbnNvbGVFeC5nZXRTdHlsZSgnIzg3ODVhMicsICcjZjRmNmZmJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYFNlcnZpY2VXb3JrZXIg5rOo5YaM5aSx6LSl4p2MOiAke2Vycn1gXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAuLi5lc2J1aWxkVG9vbC5jb25zb2xlRXgudGV4dFBhY2soXHJcbiAgICAgICAgICAgIGVzYnVpbGRUb29sLmNvbnNvbGVFeC5nZXRTdHlsZSgnIzg3ODVhMicsICcjZmZlZGEzJyksXHJcbiAgICAgICAgICAgICfkuI3mlK/mjIEgU2VydmljZVdvcmtlciAhIPCfmLEnXHJcbiAgICAgICAgKVxyXG4gICAgKTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0=