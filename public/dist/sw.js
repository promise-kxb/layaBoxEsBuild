(()=>{function e(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function n(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function t(e,t,a){return t&&n(e.prototype,t),a&&n(e,a),e}function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var s;function r(e){var n,t=e.request;s&&(n=c.get(t.url)),n||(n=fetch(t).then((function(e){return c.addResponse(t,e)}))),e.respondWith(n)}self.addEventListener("install",(function(e){})),self.addEventListener("activate",(function(e){})),self.addEventListener("message",(function(e){var n=JSON.parse(e.data),t=n.type,a=n.mes;switch(t){case"update":s&&a.version==s.version||(c.removeAll(),i.update(a.webSocketUrl),i.addMessageEventListener((function(e){var n=JSON.parse(e.data);"scriptUpdate"==n.type&&c.remove(n.mes)}))),s=a;break;case"close":c.removeAll(),i.instance&&i.instance.close(),self.removeEventListener("fetch",r)}})),self.addEventListener("fetch",r);var i=function(){function n(){e(this,n)}return t(n,null,[{key:"update",value:function(e){var n=this;this.instance&&this.instance.close(),this.instance=new WebSocket(e),this.usable=!0,this.instance.addEventListener("error",(function(){console.error("webSocketÂá∫ÈîôÂï¶ÔºÅüò±"),c.removeAll(),n.usable=!1}))}},{key:"addMessageEventListener",value:function(e){this.usable&&this.instance.addEventListener("message",e)}}]),n}();a(i,"instance",null),a(i,"usable",!1);var c=function(){function n(){e(this,n)}return t(n,null,[{key:"get",value:function(e){e=e.replace(/\\/g,"/");var n=this.cache.find((function(n){return new RegExp("^".concat(n[0],"$"),"i").test(e)}));if(n)return n[2].clone()}},{key:"addResponse",value:function(e,n){return n.headers.has("file-only-key")&&i.usable&&this.add(e.url,n.headers.get("file-only-key"),n.clone()),n}},{key:"add",value:function(e,n,t){e=e.replace(/\\/g,"/"),this.remove(n),this.cache.push([e,n,t])}},{key:"remove",value:function(e){var n=this.cache.findIndex((function(n){return n[1]==e}));-1!=n&&(console.log("%c%s","color: #8785a2;","> Âà†Èô§swÂ∫üÂºÉÁºìÂ≠òÊñá‰ª∂@".concat(this.cache[n][0].replace(/[a-z]+:\/\/[a-zA-Z0-9\.]+:?[0-9]*/,"")," ‚úñÔ∏è")),this.cache.splice(n,1))}},{key:"removeAll",value:function(){this.cache.length=0}}]),n}();a(c,"cache",[])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,